#!/usr/bin/env python3
"""
AI Slide Generator - CLI App

This is the main entry point for the AI Slide Generator application.
It provides a command-line interface for generating and refining presentation slides.
"""

import os
import json
import logging
import argparse
import sys
import datetime
import time
import webbrowser
from pathlib import Path
from typing import Dict, List, Optional, Any, Union
import re

from dotenv import load_dotenv
from agents.slide_writer.slide_template import SlideTemplate

# Import agents
from agents import (
    search_deep,
    generate_outline,
    generate_slides,
    fetch_image,
    refine_presentation,
    select_template_for_presentation,
    monitor_research_and_outline,
    monitor_slides_and_refine,
    orchestrate_slide_generation
)

# For URL content summarization
import requests
from bs4 import BeautifulSoup
from concurrent.futures import ThreadPoolExecutor, as_completed

# グローバルデータストア - エージェント間でデータを共有するために使用
class AgentDataStore:
    """エージェント間でデータを共有するためのグローバルデータストア"""
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(AgentDataStore, cls).__new__(cls)
            cls._instance._data = {}
        return cls._instance
    
    def set(self, key: str, value: Any) -> None:
        """データを保存"""
        self._data[key] = value
    
    def get(self, key: str, default: Any = None) -> Any:
        """データを取得"""
        return self._data.get(key, default)
    
    def clear(self) -> None:
        """全てのデータをクリア"""
        self._data.clear()
    
    def save_to_file(self, file_path: str) -> None:
        """データをJSONファイルに保存"""
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(self._data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logging.getLogger(__name__).error(f"データの保存に失敗しました: {str(e)}")
    
    def load_from_file(self, file_path: str) -> bool:
        """JSONファイルからデータを読み込み"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                self._data = json.load(f)
            return True
        except Exception as e:
            logging.getLogger(__name__).error(f"データの読み込みに失敗しました: {str(e)}")
            return False

# グローバルデータストアのインスタンスを作成
agent_data_store = AgentDataStore()

# Create logs directory if it doesn't exist
logs_dir = Path("logs")
logs_dir.mkdir(exist_ok=True)

# Configure logging
def setup_logging(topic=None):
    """Configure logging with both console and file handlers."""
    # Clear existing handlers
    logger = logging.getLogger()
    for handler in logger.handlers[:]:
        logger.removeHandler(handler)
    
    # Create a timestamp for the log file
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    if topic:
        # Sanitize topic for filename
        safe_topic = "".join(c if c.isalnum() else "_" for c in topic)
        safe_topic = safe_topic[:30]  # Limit length
        log_filename = f"{timestamp}_{safe_topic}.log"
    else:
        log_filename = f"{timestamp}_ai_slide_generator.log"
    
    log_file = logs_dir / log_filename
    
    # Set up file handler for detailed logs
    file_handler = logging.FileHandler(log_file, encoding='utf-8')
    file_handler.setLevel(logging.DEBUG)
    file_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(file_format)
    
    # Set up console handler for simplified logs
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    # Simpler format for console - only show the message, no timestamps or levels
    console_format = logging.Formatter('%(message)s')
    console_handler.setFormatter(console_format)
    
    # Filter to prevent specific messages from showing in console
    class ConsoleFilter(logging.Filter):
        def __init__(self):
            super().__init__()
            self.last_error_message = None
            self.last_error_base = None
            
        def filter(self, record):
            # Filter out HTTP request logs from console output
            message = record.getMessage()
            if any(pattern in message for pattern in [
                "HTTP Request:", 
                "Retrying request to", 
                "Error code: 429"
            ]):
                return False
                
            # エラーメッセージの重複防止とシンプル化
            if "❌" in message:
                # コロンがある場合は詳細情報を省略して簡潔に表示
                base_message = message
                if ":" in message:
                    base_message = message.split(":", 1)[0]
                
                # 同じエラーメッセージの重複を防止（詳細エラーまたは簡略化されたエラーが同じ場合）
                if message == self.last_error_message or base_message == self.last_error_base:
                    return False
                    
                # 両方を記憶して次回比較できるようにする
                self.last_error_message = message
                self.last_error_base = base_message
                
                # ログファイルには詳細を記録し、コンソールには簡潔に表示
                record.original_message = message
                record.msg = base_message
            
            return True
    
    console_handler.addFilter(ConsoleFilter())
    
    # Configure root logger
    logger.setLevel(logging.DEBUG)
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return log_file

def generate_slides_cli(topic: str, slide_count: int = 5, style: str = "professional", depth: str = "low", output_file: str = None, use_orchestrator: bool = False) -> str:
    """
    Generate slides from the command line interface
    
    Args:
        topic: The presentation topic
        slide_count: Number of slides to generate
        style: Presentation style
        depth: Search depth (low/medium/high)
        output_file: Optional file path to save the HTML
        use_orchestrator: Whether to use the orchestrator agent
        
    Returns:
        HTML content of the generated slides
    """
    # Set up logging for this CLI session
    log_file = setup_logging(topic)
    logger = logging.getLogger(__name__)
    
    # Initialize result storage
    research_results = None
    outline = None
    slide_theme = None
    html_content = None
    
    try:
        # Define line separator for readability
        separator_line = "──────────────────────────────────────────────────"
        print(separator_line)
        
        print(f"📝 生成トピック: {topic}")
        print(f"📊 検索深度: {depth}")
        if use_orchestrator:
            print(f"🧠 司令塔エージェントを使用: 有効")
        print()
        print(separator_line)
        
        if use_orchestrator:
            # Use the comprehensive orchestrator agent that manages the entire process
            print("\n🧠 司令塔エージェント: プレゼンテーション生成プロセスを開始します...")
            try:
                # Execute using orchestrator
                html_content, generation_report = orchestrate_slide_generation(
                    topic=topic, 
                    slide_count=slide_count,
                    style=style,
                    depth=depth
                )
                
                # Display QA summary from the report
                qa_summary = generation_report.get("qa_summary", "No QA summary available")
                print(f"\n📋 QA結果: {qa_summary}")
                
                # Show any special notes from the orchestration process
                if "notes" in generation_report and generation_report["notes"]:
                    print("\n📌 司令塔エージェントからの注意点:")
                    for note in generation_report["notes"]:
                        print(f"  • {note}")
                
            except Exception as e:
                logger.error(f"❌ 司令塔エージェントエラー: {str(e)}")
                print("ℹ️ 標準的なスライド生成プロセスに切り替えます")
                # Fall back to the standard process
                use_orchestrator = False
        
        if not use_orchestrator:
            # Standard step-by-step process
            # Step 1 & 2: Research the topic and generate outline using monitor agent
            print("\n🔍 リサーチおよびアウトライン作成: モニタリングエージェントによる処理を開始します...")
            try:
                logger.info(f"Starting research and outline phase with monitoring for: {topic}")
                research_results, outline = monitor_research_and_outline(topic, slide_count, depth)
            except Exception as e:
                logger.error(f"❌ モニタリングエージェントエラー: {str(e)}")
                print("ℹ️ 基本的なリサーチとアウトラインで続行します")
                
                # Fallback to direct research and outline
                try:
                    from agents.research import ResearchAgent
                    research_agent = ResearchAgent()
                    research_results = research_agent.search_deep(topic, depth)
                    
                    from agents.outline import generate_outline
                    outline = generate_outline(research_results, slide_count)
                except Exception as fallback_error:
                    logger.error(f"❌ フォールバック処理にも失敗しました: {str(fallback_error)}")
            
            print(f"✅ {slide_count} スライドのアウトラインを作成しました")
            
            print()
            print(separator_line)
            
            # Step 3: Select appropriate template
            print("\n🎨 テンプレートセレクターエージェント: 最適なテンプレートを選択中...")
            print("利用可能なテンプレート: default, modern, professional, business, minimal")
            from agents.template_selector import select_template_for_presentation
            slide_theme = select_template_for_presentation(topic, outline, style)
            print(f"✅ テンプレート「{slide_theme.name}」を選択しました")
            
            print()
            print(separator_line)
            
            # Step 4 & 5: Generate slides and refine with monitoring
            print("\n📊 スライド生成および改善: モニタリングエージェントによる反復的な処理を開始します...")
            
            # Describe the slide generation process
            print()
            print("🔄 スライド生成と改善プロセス:")
            print("  1. アウトラインを基にスライドのHTMLを生成")
            print("  2. 各スライド毎にテンプレートを適用 (全スライドで同じテーマを使用)")
            print("  3. スライドごとに個別HTMLを生成後、1つのHTMLドキュメントに統合")
            print("  4. スライド改善エージェントにより内容とデザインを評価・改良")
            
            try:
                refined_html, qa_report = monitor_slides_and_refine(outline, slide_theme)
                html_content = refined_html
            except Exception as e:
                logger.error(f"❌ モニタリング付きスライド生成に失敗しました: {str(e)}")
                print("ℹ️ 基本的なスライド生成および改善に切り替えます")
                
                # Fall back to basic slides generation and refinement
                try:
                    slides_html = generate_slides(outline, theme=slide_theme, style=style)
                    refined_html, qa_report = refine_presentation(slides_html)
                    html_content = refined_html
                except Exception as fallback_error:
                    logger.error(f"❌ フォールバック処理にも失敗しました: {str(fallback_error)}")
                    raise  # Propagate error after logging
                    
            # Log completion
            print()
            print("✅ スライド改善プロセスが完了しました")
            print(f"  最終出力: 単一のHTML文書 ({len(html_content) // 1024}KB)")
            print("✅ スライドの生成と反復的な品質改善が完了しました")
            
            print()
            print(f"📋 QA結果: {qa_report.get('summary', 'No QA summary available')}")
            print(separator_line)
        
        # Save the output if a file is specified
        if output_file:
            # Generate the output filename if it's a directory
            output_path = Path(output_file)
            if output_path.is_dir():
                # Use the topic as the filename
                safe_topic = "".join(c if c.isalnum() else "_" for c in topic)
                output_path = output_path / f"{safe_topic}.html"
            
            # Ensure the directory exists
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            # Write the HTML content to the file
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            print(f"💾 スライドを保存しました: {output_path}")
        
        # Output to the console
        print(f"生成ログ: {log_file}")
        
        return html_content
        
    except Exception as e:
        logger.error(f"❌ スライド生成に失敗しました: {str(e)}")
        raise

def generate_slides_from_json(json_file: str, slide_count: int = 5, style: str = "professional", output_file: str = None, open_in_browser: bool = False) -> str:
    """
    Generate slides directly from a JSON file containing research results.
    
    Args:
        json_file: Path to the JSON file with research data
        slide_count: Number of slides to generate
        style: Presentation style
        output_file: Optional file path to save the HTML
        open_in_browser: Whether to open the generated slides in a browser
        
    Returns:
        HTML content of the generated slides
    """
    # Set up logging
    log_file = setup_logging(os.path.basename(json_file))
    logger = logging.getLogger(__name__)
    
    try:
        # Load the JSON file
        logger.info(f"Loading research data from: {json_file}")
        with open(json_file, 'r', encoding='utf-8') as f:
            research_data = json.load(f)
        
        # Display basic info
        separator_line = "──────────────────────────────────────────────────"
        topic = research_data.get("topic", "Unknown Topic")
        print(separator_line)
        print(f"📝 JSON入力ファイル: {json_file}")
        print(f"📊 トピック: {topic}")
        print(f"🎨 スタイル: {style}")
        print(f"📊 スライド数: {slide_count}")
        print(separator_line)
        
        # Step 1: Generate outline from research data
        print("\n📝 JSONデータからアウトラインを生成中...")
        from agents.outline import generate_outline
        outline = generate_outline(research_data, slide_count, topic)
        print(f"✅ {len(outline.slides)} スライドのアウトラインを作成しました")
        
        print()
        print(separator_line)
        
        # Step 2: Select appropriate template
        print("\n🎨 テンプレートセレクターエージェント: 最適なテンプレートを選択中...")
        print("利用可能なテンプレート: default, modern, professional, business, minimal")
        from agents.template_selector import select_template_for_presentation
        slide_theme = select_template_for_presentation(topic, outline, style)
        print(f"✅ テンプレート「{slide_theme.name}」を選択しました")
        
        print()
        print(separator_line)
        
        # Step 3: Create individual slide HTML files and then combine them
        print("\n📊 各スライドのHTMLファイルを作成中...")
        
        # Create output directory for individual slides
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        safe_topic = "".join(c if c.isalnum() else "_" for c in topic)[:30]
        slides_dir = os.path.join(OUTPUT_DIR, f"{timestamp}_{safe_topic}")
        os.makedirs(slides_dir, exist_ok=True)
        
        # Create SlideWriter instance
        from agents.slide_writer import SlideWriterAgent
        slide_writer = SlideWriterAgent()
        
        # List to store individual slide paths
        slide_files = []
        
        # Generate each slide as a separate HTML file
        for i, slide in enumerate(outline.slides):
            slide_num = i + 1
            print(f"\n🔄 スライド {slide_num}/{len(outline.slides)} 生成中: 「{slide.title}」")
            print(f"  タイプ: {slide.type}")
            print(f"  コンテンツ:")
            for bullet in slide.content:
                print(f"    • {bullet}")
                
            # Generate individual slide HTML
            slide_html = create_individual_slide_html(slide, slide_theme, slide_num, len(outline.slides))
            
            # Save individual slide to file
            slide_filename = f"slide_{slide_num:02d}.html"
            slide_path = os.path.join(slides_dir, slide_filename)
            with open(slide_path, 'w', encoding='utf-8') as f:
                f.write(slide_html)
                
            slide_files.append(slide_path)
            print(f"✅ スライド {slide_num} が生成され、保存されました: {slide_filename}")
        
        # Create the main slideshow HTML that combines all individual slides
        print("\n🔄 個別スライドを統合してスライドショーを生成中...")
        slideshow_html = create_index_html(slide_files, topic, slide_theme, slides_dir)
        
        # Define the output path for the combined slideshow
        if output_file:
            # Generate the output filename if it's a directory
            output_path = Path(output_file)
            if output_path.is_dir():
                # Use the topic as the filename
                safe_topic = "".join(c if c.isalnum() else "_" for c in topic)
                output_path = output_path / f"{safe_topic}.html"
        else:
            # Default output path
            output_path = os.path.join(slides_dir, f"{safe_topic}_slideshow.html")
            
        # Save the slideshow HTML
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(slideshow_html)
            
        print(f"✅ スライドショーの生成が完了しました: {output_path}")
        
        # Open in browser if requested
        if open_in_browser:
            print(f"🌐 ブラウザでスライドショーを開いています...")
            try:
                webbrowser.open(output_path.absolute().as_uri())
                print(f"✅ ブラウザでスライドを表示しています")
            except Exception as e:
                print(f"❌ ブラウザでの表示に失敗しました: {str(e)}")
                print(f"ℹ️ 手動で次のURLをブラウザに入力してください: {output_path.absolute().as_uri()}")
        
        # Output to the console
        print(f"生成ログ: {log_file}")
        
        return slideshow_html
        
    except Exception as e:
        logger.error(f"❌ JSONからのスライド生成に失敗しました: {str(e)}")
        raise

def create_individual_slide_html(slide, theme, slide_num, total_slides):
    """
    Create HTML for an individual slide.
    
    Args:
        slide: The slide content
        theme: The slide theme
        slide_num: The slide number
        total_slides: Total number of slides
        
    Returns:
        HTML for the individual slide
    """
    try:
        slide_type = slide.type.lower() if hasattr(slide, 'type') else "content"
        slide_title = slide.title if hasattr(slide, 'title') and slide.title else f"スライド {slide_num}"
        slide_content = slide.content if hasattr(slide, 'content') and slide.content else []
        
        # Add additional theme CSS variables
        css_variables = {
            "--primary-color": theme.primary_color,
            "--secondary-color": theme.secondary_color,
            "--text-color": theme.text_color,
            "--background-color": theme.background_color,
            "--accent-color": getattr(theme, "accent_color", "#F59E0B"),
            "--font-family": theme.font_family,
            "--slide-index": str(slide_num),
            "--total-slides": str(total_slides),
        }
        
        # Add heading font if available
        if hasattr(theme, "heading_font") and theme.heading_font:
            css_variables["--heading-font"] = theme.heading_font
        else:
            css_variables["--heading-font"] = theme.font_family
            
        # Add code font if available
        if hasattr(theme, "code_font") and theme.code_font:
            css_variables["--code-font"] = theme.code_font
        
        # Generate CSS variables string
        css_vars = "\n        ".join([f"{key}: {value};" for key, value in css_variables.items()])
        
        # Choose bullet style based on theme setting or default to circle
        bullet_style = "fa-circle"
        if hasattr(theme, "bullet_style"):
            if theme.bullet_style == "square":
                bullet_style = "fa-square"
            elif theme.bullet_style == "dash":
                bullet_style = "fa-minus"
            elif theme.bullet_style == "arrow":
                bullet_style = "fa-chevron-right"
                
        # Choose header style based on theme
        header_style_class = "gradient-header"
        if hasattr(theme, "header_style"):
            if theme.header_style == "solid":
                header_style_class = "solid-header"
            elif theme.header_style == "minimal":
                header_style_class = "minimal-header"
            elif theme.header_style == "none":
                header_style_class = "no-header"
        
        # Create base HTML structure for an individual slide
        html = f"""<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>スライド {slide_num} - {slide_title}</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@300;400;500;700&family=Montserrat:wght@300;400;600;700&display=swap" rel="stylesheet">
    <style>
        :root {{
            {css_vars}
        }}
        
        body {{
            font-family: var(--font-family);
            background-color: var(--background-color);
            color: var(--text-color);
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
            align-items: center;
            min-height: 100vh;
        }}
        
        /* External navigation bar */
        .external-nav {{
            width: 100%;
            background-color: rgba(0, 0, 0, 0.3);
            padding: 0.5rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }}
        
        .index-button {{
            background-color: var(--accent-color);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.9rem;
            transition: opacity 0.2s;
        }}
        
        .index-button:hover {{
            opacity: 0.9;
        }}
        
        /* Hide external nav in slideshow mode */
        body.in-slideshow .external-nav {{
            display: none;
        }}
        
        .slide {{
            width: 90%;
            max-width: 1000px;
            height: auto;
            min-height: 70vh;
            padding: 2rem 3rem;
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
            align-items: flex-start;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            position: relative;
            overflow: hidden;
            margin-bottom: 2rem;
        }}
        
        /* Text density styles */
        .text-density-minimal .content ul li {{
            margin-bottom: 2rem;
            font-size: 1.4rem;
        }}
        
        .text-density-balanced .content ul li {{
            margin-bottom: 1.2rem;
            font-size: 1.2rem;
        }}
        
        .text-density-detailed .content ul li {{
            margin-bottom: 0.8rem;
            font-size: 1.1rem;
        }}
        
        h1, h2 {{
            font-family: var(--heading-font, var(--font-family));
            color: var(--primary-color);
            margin-bottom: 2rem;
        }}
        
        h1 {{
            font-size: 3.5rem;
            font-weight: 700;
        }}
        
        h2 {{
            font-size: 2.5rem;
            font-weight: 600;
        }}
        
        .title-slide {{
            text-align: center;
            align-items: center;
            justify-content: center;
        }}
        
        .subtitle {{
            font-size: 1.8rem;
            margin-bottom: 2rem;
            opacity: 0.8;
        }}
        
        /* Header Styles */
        .gradient-header {{
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
            padding: 1.5rem;
            margin: -2rem -3rem 2rem -3rem;
            border-radius: 8px 8px 0 0;
        }}
        
        .gradient-header h2 {{
            color: white;
            margin-bottom: 0;
        }}
        
        .solid-header {{
            background-color: var(--primary-color);
            padding: 1.5rem;
            margin: -2rem -3rem 2rem -3rem;
            border-radius: 8px 8px 0 0;
        }}
        
        .solid-header h2 {{
            color: white;
            margin-bottom: 0;
        }}
        
        .minimal-header {{
            border-bottom: 3px solid var(--primary-color);
            padding-bottom: 1rem;
            margin-bottom: 2rem;
        }}
        
        .no-header {{
            margin-bottom: 2rem;
        }}
        
        /* Content Styles */
        .slide-content {{
            width: 100%;
            flex: 1;
        }}
        
        .bullet-list {{
            list-style: none;
            padding: 0;
            margin: 1rem 0;
            width: 100%;
        }}
        
        .bullet-item {{
            display: flex;
            align-items: flex-start;
            margin-bottom: 1.5rem;
            font-size: 1.5rem;
        }}
        
        .bullet-icon {{
            color: var(--secondary-color);
            margin-right: 1rem;
            font-size: 0.8em;
            min-width: 1em;
        }}
        
        .bullet-content {{
            flex: 1;
        }}
        
        .slide-footer {{
            margin-top: auto;
            width: 100%;
            display: flex;
            justify-content: space-between;
            font-size: 0.9rem;
            opacity: 0.7;
            padding-top: 2rem;
        }}
    </style>
</head>
<body>
    <div class="external-nav">
        <a href="index.html" class="index-button">
            <i class="fas fa-home"></i> 目次に戻る
        </a>
        <span class="slide-info">スライド {slide_num}/{total_slides}</span>
    </div>"""
        
        # Add content based on slide type
        if slide_type == "title":
            html += f"""
    <div class="slide title-slide">
        <h1>{slide_title}</h1>"""
            
            if hasattr(slide, 'subtitle') and slide.subtitle:
                html += f"""
        <div class="subtitle">{slide.subtitle}</div>"""
            
            if slide_content:
                html += """
        <div class="content">
            <ul class="bullet-list">"""
                
                for point in slide_content:
                    html += f"""
                <li class="bullet-item">
                    <span>{point}</span>
                </li>"""
                
                html += """
            </ul>
        </div>"""
            
            html += f"""
        <div class="slide-footer">
            <span>スライド {slide_num}/{total_slides}</span>
        </div>
    </div>
</body>
</html>"""
        
        elif slide_type == "content":
            html += f"""
    <div class="slide content-slide">
        <div class="{header_style_class}">
            <h2>{slide_title}</h2>
        </div>
        <div class="slide-content">
            <ul class="bullet-list">"""
            
            for point in slide_content:
                html += f"""
                <li class="bullet-item">
                    <i class="bullet-icon fas {bullet_style}"></i>
                    <div class="bullet-content">
                        <span>{point}</span>
                    </div>
                </li>"""
            
            html += f"""
            </ul>
        </div>
        <div class="slide-footer">
            <span>スライド {slide_num}/{total_slides}</span>
        </div>
    </div>
</body>
</html>"""
        
        # For other slide types, use content slide as default
        else:
            html += f"""
    <div class="slide content-slide">
        <div class="{header_style_class}">
            <h2>{slide_title}</h2>
        </div>
        <div class="slide-content">
            <ul class="bullet-list">"""
            
            for point in slide_content:
                html += f"""
                <li class="bullet-item">
                    <i class="bullet-icon fas {bullet_style}"></i>
                    <div class="bullet-content">
                        <span>{point}</span>
                    </div>
                </li>"""
            
            html += f"""
            </ul>
        </div>
        <div class="slide-footer">
            <span>スライド {slide_num}/{total_slides}</span>
        </div>
    </div>
</body>
</html>"""
        
        return html
        
    except Exception as e:
        logging.error(f"Error generating individual slide HTML: {str(e)}")
        # Return a simple fallback slide
        return f"""<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>スライド {slide_num} - エラー</title>
    <style>
        body {{ font-family: sans-serif; padding: 2rem; }}
        .error {{ color: red; }}
    </style>
</head>
<body>
    <h1>スライド生成エラー</h1>
    <p class="error">{str(e)}</p>
    <p><a href="index.html">目次に戻る</a></p>
</body>
</html>"""

def parse_args():
    """Parse command line arguments"""
    # Create the top-level parser
    description = """AI Slide Generator - Automatically generate presentation slides from topics

This tool uses AI to automatically research topics, create outlines,
and generate slides. Select search depth (low/medium/high)
to balance between generation speed and information detail.

The system uses OpenAI's web search API to gather accurate information for slides.
        """
    
    epilog = """Examples:
  # Generate 5 slides (low depth)
  python app.py slide "AI Basics" --slides 5
  
  # Generate with detailed research and open in browser
  python app.py slide "Machine Learning" --depth high --open
  
  # Basic search functionality without detailed analysis
  python app.py research "AI and Machine Learning" --basic --results 10
  
  # Perform detailed research and save to JSON
  python app.py research "Quantum Computing" --depth high --output research.json
  
  # Generate slides from a JSON file
  python app.py json-to-slides research.json --slides 5 --open
        """
    
    parser = argparse.ArgumentParser(description=description, epilog=epilog,
                                    formatter_class=argparse.RawDescriptionHelpFormatter)
    
    # Create subparsers for different commands
    subparsers = parser.add_subparsers(dest='command', help='Command to run', title='Available commands')
    
    # Slide generation command
    slide_parser = subparsers.add_parser('slide', help='Generate presentation slides from a topic')
    slide_parser.add_argument('topic', help='The topic to generate slides about')
    slide_parser.add_argument('--slides', '-s', type=int, default=5, help='Number of slides to generate (default: 5)')
    slide_parser.add_argument('--style', type=str, default='professional', 
                             choices=['professional', 'modern', 'minimal', 'business'],
                             help='Presentation style (default: professional)')
    slide_parser.add_argument('--depth', '-d', type=str, default='low', 
                            choices=['low', 'medium', 'high'],
                            help='Research depth - affects generation time and detail (default: low)')
    slide_parser.add_argument('--output', '-o', type=str, 
                            help='Output HTML file or directory (default: temporary file)')
    slide_parser.add_argument('--open', '-b', action='store_true', 
                            help='Open the generated slides in a browser')
    slide_parser.add_argument('--orchestrator', action='store_true',
                            help='Use the comprehensive orchestrator agent to manage the entire process')
    
    # Add quality check arguments
    slide_parser.add_argument('--quality-check', action='store_true',
                              help='Enable quality check and improvement features')
    slide_parser.add_argument('--min-quality', type=int, default=70,
                              help='Minimum quality score (0-100) required to pass quality check (default: 70)')
    slide_parser.add_argument('--quality-report', action='store_true',
                              help='Generate and display detailed quality report')
    slide_parser.add_argument('--focus-metrics', type=str,
                              help='Comma-separated list of metrics to focus on during quality check (e.g., "content,accuracy")')
    slide_parser.add_argument('--text-density', type=str, default='balanced',
                              choices=['minimal', 'balanced', 'detailed'],
                              help='Expected text density for content richness evaluation (default: balanced)')
    slide_parser.add_argument('--max-refinement-iterations', type=int, default=3,
                              help='Maximum number of refinement iterations for low-quality slides (default: 3)')
    
    # Research command (detailed research without slides)
    research_parser = subparsers.add_parser('research', help='Research functionality - both quick search and detailed analysis')
    research_parser.add_argument('topic', help='The topic to research')
    research_parser.add_argument('--depth', '-d', type=str, default='medium',
                               choices=['low', 'medium', 'high'],
                               help='Research depth (default: medium)')
    research_parser.add_argument('--output', '-o', type=str, help='Output file for research results')
    research_parser.add_argument('--format', '-f', type=str, default='json',
                               choices=['json', 'markdown', 'txt'],
                               help='Output format for research results (default: json)')
    research_parser.add_argument('--basic', '-b', action='store_true',
                               help='基本的な検索結果のみを表示（詳細分析なし）')
    research_parser.add_argument('--results', '-r', type=int, default=10,
                               help='Number of search results to return (default: 10)')
    research_parser.add_argument('--json', '-j', action='store_true',
                               help='結果をJSON形式で標準出力に表示')
    research_parser.add_argument('--quiet', '-q', action='store_true',
                               help='ファイル出力時に詳細な結果表示を抑制する')
    research_parser.add_argument('--store', '-s', type=str, 
                               help='検索結果をデータストアに保存するキー名（次のエージェントで使用するため）')
    research_parser.add_argument('--store-file', type=str, 
                               help='検索結果をグローバルデータストアファイルに保存するためのJSONファイルパス')
    research_parser.add_argument('--next-agent', type=str, choices=['outline', 'slides', 'template'],
                               help='検索後に自動的に実行する次のエージェント（outline, slides, templateなど）')
    
    # JSON to slides command
    json_slides_parser = subparsers.add_parser('json-to-slides', help='Generate slides directly from a JSON file')
    json_slides_parser.add_argument('json_file', help='Path to the JSON file with research data')
    json_slides_parser.add_argument('--slides', '-s', type=int, default=5, 
                                  help='Number of slides to generate (default: 5)')
    json_slides_parser.add_argument('--style', type=str, default='professional',
                                  choices=['professional', 'modern', 'minimal', 'business'],
                                  help='Presentation style (default: professional)')
    json_slides_parser.add_argument('--output', '-o', type=str,
                                  help='Output HTML file or directory (default: temporary file)')
    json_slides_parser.add_argument('--open', '-b', action='store_true',
                                  help='Open the generated slides in a browser')
    
    # If no arguments are provided, show the help
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)
    
    # コマンドラインから最初のコマンド部分を取得
    command = None
    for arg in sys.argv[1:]:
        if not arg.startswith('-') and arg in ['slide', 'research', 'json-to-slides']:
            command = arg
            break
    
    if not command:
        parser.print_help()
        sys.exit(1)
    
    # parse_known_argsを使用して、未知の引数をスキップ
    args, unknown = parser.parse_known_args()
    
    # 未知の引数があれば警告を表示
    if unknown:
        cross_command_args = {
            'slide': [],
            'research': [],
            'json-to-slides': [],
        }
        
        # コマンドと互換性のない引数を検出
        if args.command in cross_command_args:
            ignored_args = []
            for arg in unknown:
                if any(cross_arg in arg for cross_arg in cross_command_args.get(args.command, [])):
                    ignored_args.append(arg)
            
            if ignored_args:
                print(f"⚠️ 注意: '{args.command}'コマンドでは以下の引数は無視されます: {', '.join(ignored_args)}")
                if '--slides' in ' '.join(ignored_args) and args.command == 'slide':
                    print("💡 ヒント: スライドを生成するには 'slide' コマンドを使用してください")
    
    return args

def generate_command(args: argparse.Namespace) -> None:
    """Handle the 'slide' command for slide generation"""
    try:
        # Set up logging
        log_file = setup_logging(args.topic)
        logger = logging.getLogger(__name__)
        
        # Start timer
        start_time = time.time()
        
        # Generate slides
        html_content = generate_slides_cli(
            topic=args.topic,
            slide_count=args.slides,
            style=args.style,
            depth=args.depth,
            output_file=args.output,
            use_orchestrator=args.orchestrator
        )
        
        # Display log file
        print(f"\n📄 詳細ログファイル: {log_file}")
        
        # Calculate and display elapsed time
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 生成時間: {int(minutes)}分 {int(seconds)}秒")
        
        print(f"\n🎉 スライド生成が完了しました！")
        
        # Open in browser if requested
        if args.open:
            # If output file was specified, use that path
            if args.output:
                output_path = Path(args.output)
                if output_path.is_dir():
                    # Use the topic as the filename
                    safe_topic = "".join(c if c.isalnum() else "_" for c in args.topic)
                    output_path = output_path / f"{safe_topic}.html"
                browser_path = output_path.absolute().as_uri()
            else:
                # Create a temporary file
                import tempfile
                temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.html')
                temp_path = Path(temp_file.name)
                with open(temp_path, 'w', encoding='utf-8') as f:
                    f.write(html_content)
                browser_path = temp_path.absolute().as_uri()
            
            # Open in browser
            print(f"🌐 ブラウザでスライドを開いています...")
            try:
                webbrowser.open(browser_path)
                print(f"✅ ブラウザでスライドを表示しています")
            except Exception as e:
                print(f"❌ ブラウザでの表示に失敗しました: {str(e)}")
                print(f"ℹ️ 手動で次のURLをブラウザに入力してください: {browser_path}")
            
    except Exception as e:
        logger.error(f"❌ スライド生成エラー: {str(e)}")
        sys.exit(1)

def research_command(args: argparse.Namespace) -> None:
    """Handle the 'research' command for detailed research without slide generation"""
    try:
        # Set up logging
        log_file = setup_logging(args.topic)
        logger = logging.getLogger(__name__)
        
        print(f"📝 リサーチトピック: {args.topic}")
        print(f"📊 リサーチ深度: {args.depth}")
        if args.basic:
            print("🔍 モード: 基本検索（詳細分析なし）")
        else:
            print("🔍 モード: 詳細リサーチ（二次検索と要約あり）")
        print("──────────────────────────────────────────────────")
        
        # Initialize the research agent
        from agents.research import ResearchAgent
        research_agent = ResearchAgent()
        
        # Start timer
        start_time = time.time()
        
        # 出力抑制フラグをチェック（全共通処理用）
        should_display_details = not (args.output and args.quiet)
        
        # マークダウン記号をクリーンアップするヘルパー関数
        def clean_markdown(text):
            if not text or not isinstance(text, str):
                return text
            # ** マークアップ（太字）の削除
            cleaned = text.replace("**", "")
            # その他のマークダウン記号を必要に応じて削除
            return cleaned
        
        # Perform basic search or comprehensive research based on flag
        if args.basic:
            # 基本検索モードの場合
            logger.info(f"🔍 トピック「{args.topic}」の基本検索を開始 (深さ: {args.depth})")
            
            # 日本語が含まれる場合、英語に翻訳してから検索する
            search_query = args.topic
            is_japanese = any(ord(c) > 127 for c in args.topic)
            
            if is_japanese:
                try:
                    print("🔤 日本語クエリを検出しました。英語に翻訳して検索します...")
                    from openai import OpenAI
                    client = OpenAI()
                    
                    # クエリを英語に翻訳
                    response = client.chat.completions.create(
                        model="gpt-3.5-turbo",
                        messages=[
                            {"role": "system", "content": "あなたは翻訳者です。日本語を英語に翻訳してください。翻訳のみを出力し、余計な説明は不要です。"},
                            {"role": "user", "content": f"以下を英語に翻訳してください: {args.topic}"}
                        ]
                    )
                    
                    translated_query = response.choices[0].message.content.strip()
                    print(f"🔤 翻訳: 「{args.topic}」→「{translated_query}」")
                    search_query = translated_query
                    
                except Exception as e:
                    logger.warning(f"⚠️ 翻訳中にエラーが発生しました: {e}")
                    print("⚠️ 翻訳中にエラーが発生しました。元のクエリで検索を続行します。")
            
            try:
                # 検索を実行
                # 複数のクエリバリエーションを用意
                search_queries = [search_query]
                
                # 元のクエリが日本語だった場合は、より汎用的な検索も試す
                if is_japanese:
                    # より汎用的なクエリのバリエーションを追加
                    if "最新" in args.topic or "トレンド" in args.topic:
                        search_queries.append("AI trends")
                        search_queries.append("AI latest developments")
                    elif "方法" in args.topic or "やり方" in args.topic:
                        search_queries.append("AI how to")
                        search_queries.append("AI methods")
                    elif "量子コンピューティング" in args.topic or "量子コンピュータ" in args.topic:
                        search_queries.append("Quantum computing")
                        search_queries.append("Quantum computers")
                        if "応用" in args.topic or "活用" in args.topic:
                            search_queries.append("Quantum computing applications")
                    elif "機械学習" in args.topic or "深層学習" in args.topic:
                        search_queries.append("Machine learning")
                        search_queries.append("Deep learning")
                    else:
                        # 一般的な代替クエリ
                        # クエリをより単純化：最初の2単語程度を抽出
                        simplified_query = " ".join(search_query.split()[:2])
                        search_queries.append(simplified_query)
                        search_queries.append(f"{search_query} guide")
                        search_queries.append(f"about {search_query}")
                        
                    # 最後に常に基本的なクエリを追加
                    if "AI" in search_query:
                        search_queries.append("AI technology")
                    if "量子" in args.topic:
                        search_queries.append("Quantum technology")
                
                # それ以外の場合も代替クエリを追加
                else:
                    # 英語クエリの場合の代替案
                    if "trends" in search_query.lower() or "latest" in search_query.lower():
                        search_queries.append("AI current developments")
                        search_queries.append("AI new technologies")
                    elif "how to" in search_query.lower() or "methods" in search_query.lower():
                        search_queries.append("AI techniques")
                        search_queries.append("AI methodologies")
                    else:
                        # 一般的な代替クエリ
                        search_queries.append(f"{search_query} overview")
                        search_queries.append(f"{search_query} explained")
                
                # 各クエリを順番に試す
                search_results = []
                success_query = None
                
                for i, query in enumerate(search_queries):
                    if i > 0:
                        print(f"🔄 代替クエリを試行中 ({i}/{len(search_queries)-1}): 「{query}」")
                    
                    try:
                        results = research_agent.search_web(query, num_results=args.results, depth=args.depth)
                        if results and len(results) > 0:
                            search_results = results
                            success_query = query
                            break
                    except Exception as inner_e:
                        logger.warning(f"⚠️ クエリ「{query}」での検索に失敗しました: {str(inner_e)}")
                        continue
                
                # すべてのクエリが失敗した場合
                if not search_results or len(search_results) == 0:
                    print("❌ すべての検索クエリが結果を返しませんでした。")
                    print("\n💡 提案:")
                    print("- より一般的なキーワードで検索してみてください")
                    print("- 英語のキーワードを使ってみてください (例: 'AI trends' など)")
                    print("- 検索深度を 'low' に変更してみてください")
                    raise Exception("検索結果が見つかりませんでした。検索クエリを変更して再試行してください。")
                else:
                    if success_query != search_query:
                        print(f"✅ 代替クエリ「{success_query}」で検索に成功しました")
                
                # Generate summaries for search results
                print(f"\n🔄 検索結果の要約を生成中...")
                try:
                    summaries = summarize_search_results(search_results)
                except Exception as e:
                    logger.error(f"❌ 要約処理中にエラーが発生しました: {str(e)}")
                    print("⚠️ 要約の生成に一部失敗しました。利用可能な情報のみ表示します。")
                    # エラーが発生した場合でも空の辞書を初期化して処理を続行
                    summaries = {}
                
                # 結果カウント (有効なURLのみ)
                valid_results = [r for r in search_results if r.url_hash in summaries or not any(invalid_url in r.url for invalid_url in ["runsystem.vn"])]
                if not valid_results:
                    valid_results = search_results  # 全てが無効な場合はそのまま使用
                
                # 結果を表示
                print(f"\n✅ 検索結果: {len(valid_results)} 件")
                
                if len(valid_results) == 0 and len(search_results) > 0:
                    print("⚠️ 有効な検索結果が見つかりませんでしたが、原文のスニペットを表示します。")
                    valid_results = search_results[:3]  # 最初の3件だけでも表示
                
                # コンテンツベースの信頼性評価を行う
                try:
                    research_agent = ResearchAgent()
                    valid_results = research_agent.evaluate_credibility(valid_results)
                    logger.info("✅ コンテンツベースの信頼性評価を実行しました")
                except Exception as eval_err:
                    # 詳細なエラーはdebugレベルでのみログに記録
                    logger.debug(f"信頼性評価中にエラーが発生しました: {str(eval_err)}")
                    logger.warning("⚠️ 信頼性評価に一部問題がありました。基本スコアを使用します")
                    
                    # スコアがゼロの場合はデフォルト値を設定
                    for result in valid_results:
                        if result.credibility_score == 0.0:
                            result.credibility_score = 0.5
                
                # 出力抑制フラグがあるかチェック
                should_display_details = not (args.output and args.quiet)
                
                if should_display_details:
                    for i, result in enumerate(valid_results, 1):
                        print(f"\n{i}. {result.title}")
                        print(f"   URL: {result.url}")
                        print(f"   信頼性スコア: {result.credibility_score:.2f}")
                        
                        # Display the summary if available
                        summary = summaries.get(result.url_hash, "")
                        if summary:
                            # Format and display the summary with a separator line
                            print(f"   📝 要約:")
                            # Wrap summary at ~80 chars for better display
                            import textwrap
                            wrapped_summary = textwrap.fill(summary, width=76)
                            for line in wrapped_summary.split('\n'):
                                print(f"      {line}")
                        
                        # Truncate snippet if too long
                        if not summary:  # Only show snippet if no summary available
                            snippet = result.snippet[:200] + "..." if len(result.snippet) > 200 else result.snippet
                            print(f"   {snippet}")
                
                # 基本モードでのファイル出力（必要な場合）
                if args.output or args.json:
                    output_format = args.format.lower()
                    
                    # Import the ResearchResult class for compatibility
                    from agents.research import ResearchResult
                    
                    # Output the data using the same format as detailed research
                    if output_format == 'json':
                        import json
                        # Create a serializable dictionary with summaries
                        results_with_summaries = []
                        for result in valid_results:
                            result_dict = result.model_dump()
                            # Add summary from our generated summaries
                            summary_text = summaries.get(result.url_hash, "")
                            result_dict["summary"] = clean_markdown(summary_text)
                            # Also update content field for consistency with detailed mode
                            if not result_dict.get("content") and summaries.get(result.url_hash):
                                result_dict["content"] = clean_markdown(summary_text)
                                
                            # 信頼性スコアが0の場合はデフォルト値を設定
                            if result_dict["credibility_score"] == 0.0:
                                result_dict["credibility_score"] = 0.5
                                
                            results_with_summaries.append(result_dict)
                        
                        # JSONデータを作成
                        output_data = {
                            "topic": args.topic,
                            "search_query": success_query or search_query,
                            "summary": f"Basic search results for '{args.topic}'",
                            "primary_results": results_with_summaries,
                            "secondary_results": [],
                            "knowledge_gaps": []
                        }
                        
                        # --next-agent オプションが指定されている場合、
                        # --store オプションの有無にかかわらずデータストアに保存
                        if args.next_agent:
                            # データストアのキーは、--store オプションの値か、デフォルト値 "research_result"
                            store_key = args.store if args.store else "research_result"
                            agent_data_store.set(store_key, output_data)
                            logger.info(f"✅ 検索結果をデータストアに保存しました (キー: {store_key})")
                        
                        # ファイル出力
                        if args.output:
                            with open(args.output, 'w', encoding='utf-8') as f:
                                json.dump(output_data, f, ensure_ascii=False, indent=2)
                        
                        # JSON形式で標準出力
                        if args.json:
                            print("\n📋 JSONデータ出力:")
                            print(json.dumps(output_data, ensure_ascii=False, indent=2))
                    elif output_format == 'markdown':
                        # Generate markdown format
                        markdown = f"# {args.topic} - Basic Search Results\n\n"
                        markdown += f"Simple search results for '{args.topic}'.\n\n"
                        if success_query and success_query != search_query:
                            markdown += f"*Note: Results obtained using the query: '{success_query}'*\n\n"
                        markdown += "## Search Results\n\n"
                        
                        for i, result in enumerate(valid_results):
                            markdown += f"{i+1}. [{result.title}]({result.url})\n"
                            summary = summaries.get(result.url_hash, "")
                            if summary:
                                markdown += f"   - **要約**: {summary}\n"
                            markdown += f"   - {result.snippet}\n\n"
                        
                        with open(args.output, 'w', encoding='utf-8') as f:
                            f.write(markdown)
                            
                    else:  # txt format
                        # Generate plain text format
                        text = f"{args.topic} - Basic Search Results\n\n"
                        text += f"Simple search results for '{args.topic}'.\n\n"
                        if success_query and success_query != search_query:
                            text += f"Note: Results obtained using the query: '{success_query}'\n\n"
                        text += "Search Results:\n\n"
                        
                        for i, result in enumerate(valid_results):
                            text += f"{i+1}. {result.title}\n"
                            text += f"   URL: {result.url}\n"
                            summary = summaries.get(result.url_hash, "")
                            if summary:
                                text += f"   要約: {summary}\n"
                            text += f"   {result.snippet}\n\n"
                        
                        with open(args.output, 'w', encoding='utf-8') as f:
                            f.write(text)
                    
                    # 重複メッセージの防止のため、個別のフォーマットではなく、ここで共通メッセージを表示
                    if args.output:
                        print(f"\n💾 リサーチ結果を保存しました: {args.output} (形式: {output_format})")

                    # 次のエージェントで使用するためのデータ設定 - args.outputの条件から外に移動
                        if args.store:
                            # デバッグ情報を追加
                            print(f"\n🔍 デバッグ情報 - store_key: {args.store}")
                            print(f"🔍 デバッグ情報 - output_data type: {type(output_data)}")
                            print(f"🔍 デバッグ情報 - output_data keys: {list(output_data.keys()) if isinstance(output_data, dict) else 'Not a dict'}")
                                # データストアに保存
                            agent_data_store.set(args.store, output_data)
                            print(f"\n🔄 検索結果をデータストアに保存しました (キー: {args.store})")
                        # 保存後の確認
                        stored_data = agent_data_store.get(args.store)
                        print(f"🔍 デバッグ情報 - stored_data: {'存在します' if stored_data else '存在しません'}")
                        
                        # データストアをファイルに保存
                        if args.store_file:
                            # データストアの内容をファイルに保存
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 データストアをファイルに保存しました: {args.store_file}")
            except Exception as e:
                error_message = f"検索に失敗しました: {str(e)}"
                logger.error(f"❌ {error_message}")
                print(f"❌ 処理を中止します")
                raise Exception(error_message)
        else:
            # 詳細リサーチモードの場合（既存の実装）
            try:
                logger.info(f"🔍 トピック「{args.topic}」の詳細調査を開始 (深さ: {args.depth})")
                research_result = None  # Initialize variable to avoid scope issues
                
                # Execute the deep search
                research_result = research_agent.search_deep(args.topic, args.depth)
                
                # Generate summaries for primary search results
                if research_result.primary_results:
                    if should_display_details:
                        print(f"\n🔄 検索結果の要約を生成中...")
                    summaries = summarize_search_results(research_result.primary_results)
                    
                    # Add the summaries to the research result for later use
                    for result in research_result.primary_results:
                        if result.url_hash in summaries:
                            result.content = summaries[result.url_hash]
                
                # 信頼性スコアが0の結果に対して再評価を行う
                zero_score_results = [r for r in research_result.primary_results if r.credibility_score == 0.0]
                if zero_score_results:
                    logger.info(f"🧐 信頼性スコアが0の結果 {len(zero_score_results)} 件を再評価します")
                    try:
                        updated_results = research_agent.evaluate_credibility(zero_score_results)
                        # 結果を元のリストに戻す
                        result_map = {r.url: r for r in updated_results}
                        for i, result in enumerate(research_result.primary_results):
                            if result.url in result_map:
                                research_result.primary_results[i] = result_map[result.url]
                        logger.info(f"✅ 信頼性再評価が完了しました")
                    except Exception as eval_err:
                        logger.error(f"❌ 信頼性再評価中にエラーが発生しました: {str(eval_err)}")
                
                # Print the summary
                if should_display_details:
                    print("\n📋 リサーチサマリー:")
                    if research_result.summary:
                        # Show the first 2000 characters of the summary with "..." if truncated
                        summary_preview = research_result.summary[:2000]
                        if len(research_result.summary) > 2000:
                            summary_preview += "...\n(サマリーは省略されています。詳細はログファイルを確認してください)"
                        print(summary_preview)
                    else:
                        print("サマリーを生成できませんでした。")
                
                # Print research statistics
                if should_display_details:
                    print("\n📊 リサーチ統計:")
                    print(f"  • 主要情報源: {len(research_result.primary_results)} 件")
                    if research_result.primary_results:
                        # Show top 3 domains
                        domains = {}
                        for result in research_result.primary_results:
                            domain = result.domain
                            if domain not in domains:
                                domains[domain] = 0
                            domains[domain] += 1
                        
                        # Sort domains by count
                        sorted_domains = sorted(domains.items(), key=lambda x: x[1], reverse=True)
                        print("    主要ドメイン:")
                        for domain, count in sorted_domains[:3]:
                            print(f"      - {domain}: {count} 件")
                            
                        # Display top primary results with summaries
                        print("\n📚 主要情報源と要約:")
                        for i, result in enumerate(research_result.primary_results[:5]):
                            print(f"\n{i+1}. {result.title}")
                            print(f"   URL: {result.url}")
                            print(f"   信頼性スコア: {result.credibility_score:.2f}")
                            
                            # Display content as summary if available
                            if result.content:
                                print(f"   📝 要約:")
                                # Wrap summary at ~80 chars for better display
                                import textwrap
                                wrapped_summary = textwrap.fill(result.content, width=76)
                                for line in wrapped_summary.split('\n'):
                                    print(f"      {line}")
                            
                            # Display snippet
                            if not result.content:  # Only show snippet if no summary available
                                snippet = result.snippet[:200] + "..." if len(result.snippet) > 200 else result.snippet
                                print(f"   {snippet}")
                        
                        if len(research_result.primary_results) > 5:
                            print(f"\n... ほか {len(research_result.primary_results) - 5} 件の情報源があります")
                    
                    print(f"  • 追加情報源: {len(research_result.secondary_results)} 件")
                    
                    # Show knowledge gaps
                    if research_result.knowledge_gaps:
                        print("  • 情報ギャップ:")
                        for gap in research_result.knowledge_gaps[:5]:  # Show top 5
                            print(f"    - {gap}")
                        if len(research_result.knowledge_gaps) > 5:
                            print(f"      ... ほか {len(research_result.knowledge_gaps) - 5} 件")
                
                # Save results if output file specified
                if args.output or args.json:
                    output_format = args.format.lower()
                    
                    if output_format == 'json':
                        import json
                        # Create a serializable dictionary with summaries
                        primary_results_with_summaries = []
                        for result in research_result.primary_results:
                            result_dict = result.model_dump()
                            # Use content field as summary if available, otherwise use generated summary
                            if not result_dict.get("content") and result.url_hash in summaries:
                                content_text = summaries.get(result.url_hash)
                                result_dict["content"] = clean_markdown(content_text)
                            # Ensure summary field exists
                            if result.content:
                                result_dict["summary"] = clean_markdown(result.content)
                            elif result.url_hash in summaries:
                                summary_text = summaries.get(result.url_hash)
                                result_dict["summary"] = clean_markdown(summary_text)
                                
                            # 信頼性スコアが0の場合はデフォルト値を設定
                            if result_dict["credibility_score"] == 0.0:
                                result_dict["credibility_score"] = 0.5
                                
                            primary_results_with_summaries.append(result_dict)
                        
                        output_data = {
                            "topic": research_result.topic,
                            "summary": clean_markdown(research_result.summary),
                            "primary_results": primary_results_with_summaries,
                            "secondary_results": [result.model_dump() for result in research_result.secondary_results],
                            "knowledge_gaps": research_result.knowledge_gaps
                        }
                        
                        # --next-agent オプションが指定されている場合、
                        # --store オプションの有無にかかわらずデータストアに保存
                        if args.next_agent:
                            # データストアのキーは、--store オプションの値か、デフォルト値 "research_result"
                            store_key = args.store if args.store else "research_result"
                            agent_data_store.set(store_key, output_data)
                            logger.info(f"✅ 検索結果をデータストアに保存しました (キー: {store_key})")
                        
                        # ファイル出力
                        if args.output:
                            with open(args.output, 'w', encoding='utf-8') as f:
                                json.dump(output_data, f, ensure_ascii=False, indent=2)
                        
                        # JSON形式で標準出力
                        if args.json:
                            print("\n📋 JSONデータ出力:")
                            print(json.dumps(output_data, ensure_ascii=False, indent=2))
                    elif output_format == 'markdown':
                        # Generate markdown format
                        markdown = f"# {research_result.topic} - Research Summary\n\n"
                        markdown += research_result.summary if research_result.summary else "No summary available."
                        markdown += "\n\n## Primary Sources\n\n"
                        
                        for i, result in enumerate(research_result.primary_results):
                            markdown += f"{i+1}. [{result.title}]({result.url})\n"
                            if result.content:  # Include summary if available
                                markdown += f"   - **要約**: {result.content}\n"
                            markdown += f"   - {result.snippet}\n\n"
                        
                        markdown += "## Knowledge Gaps\n\n"
                        for gap in research_result.knowledge_gaps:
                            markdown += f"- {gap}\n"
                        
                        with open(args.output, 'w', encoding='utf-8') as f:
                            f.write(markdown)
                            
                    else:  # txt format
                        # Generate plain text format
                        text = f"{research_result.topic} - Research Summary\n\n"
                        text += research_result.summary if research_result.summary else "No summary available."
                        text += "\n\nPrimary Sources:\n\n"
                        
                        for i, result in enumerate(research_result.primary_results):
                            text += f"{i+1}. {result.title}\n"
                            text += f"   URL: {result.url}\n"
                            if result.content:  # Include summary if available
                                text += f"   要約: {result.content}\n"
                            text += f"   {result.snippet}\n\n"
                        
                        text += "Knowledge Gaps:\n\n"
                        for gap in research_result.knowledge_gaps:
                            text += f"- {gap}\n"
                        
                        with open(args.output, 'w', encoding='utf-8') as f:
                            f.write(text)
                    
                    # 重複メッセージの防止のため、個別のフォーマットではなく、ここで共通メッセージを表示
                    if args.output:
                        print(f"\n💾 リサーチ結果を保存しました: {args.output} (形式: {output_format})")

                    # 次のエージェントで使用するためのデータ設定 - args.outputの条件から外に移動
                        if args.store:
                            # デバッグ情報を追加
                            print(f"\n🔍 デバッグ情報 - store_key: {args.store}")
                            print(f"🔍 デバッグ情報 - output_data type: {type(output_data)}")
                            print(f"🔍 デバッグ情報 - output_data keys: {list(output_data.keys()) if isinstance(output_data, dict) else 'Not a dict'}")
                                # データストアに保存
                            agent_data_store.set(args.store, output_data)
                            print(f"\n🔄 検索結果をデータストアに保存しました (キー: {args.store})")
                        # 保存後の確認
                        stored_data = agent_data_store.get(args.store)
                        print(f"🔍 デバッグ情報 - stored_data: {'存在します' if stored_data else '存在しません'}")
                        
                        # データストアをファイルに保存
                        if args.store_file:
                            # データストアの内容をファイルに保存
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 データストアをファイルに保存しました: {args.store_file}")
            except Exception as e:
                error_message = f"詳細リサーチに失敗しました: {str(e)}"
                logger.error(f"❌ {error_message}")
                print(f"❌ 処理を中止します")
                raise Exception(error_message)
        
        # 次のエージェントを実行
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
        
    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        
                        # アウトライン結果を表示
                        print("\n✅ アウトラインの生成が完了しました:")
                        for i, section in enumerate(outline, 1):
                            print(f"\n{i}. {section.title}")
                            for point in section.points:
                                print(f"   • {point}")
                        
                        # データストアにアウトラインを保存
                        agent_data_store.set("outline_result", outline)
                        print("\n🔄 アウトラインをデータストアに保存しました (キー: outline_result)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ アウトライン生成中にエラーが発生しました: {str(e)}")
                        print(f"❌ アウトラインの生成に失敗しました: {str(e)}")
                else:
                    print(f"❌ データストアに検索結果が見つかりません (キー: {store_key})")
                    print("💡 検索結果を取得するには先に検索を実行してください。例:")
                    print(f"   python app.py research \"<トピック>\" --next-agent outline")
                    print("   または")
                    print(f"   python app.py research \"<トピック>\" --store {store_key} --next-agent outline")
            
            elif args.next_agent == 'template':
                # テンプレート選択を実行
                outline = agent_data_store.get("outline_result")
                
                if outline:
                    try:
                        from agents.template_selector import select_template_for_presentation
                        
                        # テンプレートを選択
                        print("\n🎨 トピックとアウトラインに基づいてテンプレートを選択中...")
                        print("利用可能なテンプレート: default, modern, professional, business, minimal")
                        template = select_template_for_presentation(args.topic, outline)
                        
                        # 結果を表示
                        print(f"   スタイル: {template.style}")
                        
                        # データストアにテンプレートを保存
                        agent_data_store.set("selected_template", template)
                        print("\n🔄 選択されたテンプレートをデータストアに保存しました (キー: selected_template)")
                        
                        # ファイルに保存する場合
                        if args.store_file:
                            agent_data_store.save_to_file(args.store_file)
                            print(f"\n💾 更新されたデータストアをファイルに保存しました: {args.store_file}")
                    
                    except Exception as e:
                        logger.error(f"❌ テンプレート選択中にエラーが発生しました: {str(e)}")
                        print(f"❌ テンプレートの選択に失敗しました: {str(e)}")
                else:
                    print("❌ データストアにアウトラインが見つかりません。先にアウトラインを生成してください。")
            
            # 他のエージェントも同様に追加可能
        
        # Calculate and display elapsed time (共通処理)
        elapsed = time.time() - start_time
        minutes, seconds = divmod(elapsed, 60)
        print(f"\n⏱️ 処理時間: {int(minutes)}分 {int(seconds)}秒")
        print(f"\n✅ 処理が完了しました")
        print(f"📄 詳細ログファイル: {log_file}")
        
        # デバッグ情報 - データストアの検証
        print("\n🔍 デバッグ情報 - 次のエージェント実行前のデータストア状態")
        if args.store:
            print(f"🔍 デバッグ情報 - 要求されたキー: {args.store}")
            stored_data = agent_data_store.get(args.store)
            print(f"🔍 デバッグ情報 - データ存在: {'Yes' if stored_data else 'No'}")
            if stored_data:
                print(f"🔍 デバッグ情報 - データ型: {type(stored_data)}")
                print(f"🔍 デバッグ情報 - データサイズ: {len(str(stored_data))} バイト")
                if isinstance(stored_data, dict):
                    print(f"🔍 デバッグ情報 - データキー: {list(stored_data.keys())}")
        
        if args.next_agent:
            print(f"\n🔄 次のエージェントを実行します: {args.next_agent}")
            
            # 各種エージェントへの分岐
            if args.next_agent == 'outline':
                # 検索結果を使用してアウトラインを生成
                # store_keyを取得（指定されているか、デフォルト値）
                store_key = args.store if args.store else "research_result"
                research_data = agent_data_store.get(store_key)
                
                if research_data:
                    from agents.outline import generate_outline
                    try:
                        # スライド数のデフォルト値は5
                        slide_count = 5
                        
                        # アウトラインを生成
                        print("\n📝 検索結果を使用してアウトラインを生成中...")
                        outline = generate_outline(research_data, slide_count)
                        