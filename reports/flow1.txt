# AI Slide Generator ワークフロー解説

## 概要
AI Slide Generatorは、指定されたトピックについて自動的に調査を行い、プレゼンテーションスライドを生成するシステムです。
このドキュメントでは、システムの各ステップの処理内容と、特に検索結果をLLM（大規模言語モデル）によってどのようにスライド内容をブラッシュアップしているかを説明します。

## 主要なエージェント
システムは複数のエージェントで構成されています：
1. **ResearchAgent**: ウェブ検索を実行し、情報を収集
2. **OutlineAgent**: 調査結果を基にスライドのアウトラインを作成
3. **TemplateSelectorAgent**: トピックと内容に適したテンプレートを選択
4. **SlideWriterAgent**: アウトラインからスライドのHTML生成
5. **RefinerAgent**: スライドの品質向上と問題修正
6. **MonitoringAgent**: 各エージェント間の調整と品質管理

## ワークフローの詳細

### ステップ1: トピック調査 (ResearchAgent)
- **入力**: ユーザーが指定したトピックと検索深度（low/medium/high）
- **処理内容**:
  1. OpenAIのAPI（Web検索対応モデル）を使用してトピックの検索を実行
  2. 検索結果から情報を抽出し、SearchResultオブジェクトとして構造化
  3. 結果の信頼性を評価し、信頼性スコアを付与
  4. 複数の情報源からの結果をクラスタリングして重複を排除
  5. 収集した情報から知識ギャップ（足りない情報）を特定
  6. ギャップを埋めるための二次検索を実行（depth=medium/highの場合）
  7. 調査結果から包括的なサマリーを生成
- **出力**: ResearchResultオブジェクト（トピック、プライマリ結果、セカンダリ結果、サマリー、知識ギャップ）

### ステップ2: アウトライン生成 (OutlineAgent)
- **入力**: ResearchResultオブジェクトとスライド数
- **処理内容**:
  1. 調査結果をLLMに入力し、効果的なスライド構造を計画
  2. 各スライドのタイトル、内容、画像提案を生成
  3. 情報が不足している場合、MonitoringAgentが追加調査を要求
- **出力**: SlideDeckオブジェクト（タイトル、サブタイトル、各スライドの内容）

### ステップ3: テンプレート選択 (TemplateSelectorAgent)
- **入力**: トピック、SlideDeckオブジェクト、スタイル設定
- **処理内容**:
  1. トピックとスライド内容に基づき、LLMを活用して最適なテンプレートを分析・選択
  2. スタイルパラメータ（professional, academic, minimal, creative）を考慮
  3. トピックの性質（技術的、ビジネス向け、教育向けなど）に基づくテンプレート選定
  4. カラーパレット、フォント、レイアウトを含むテンプレート情報の生成
- **出力**: 選択されたテンプレート情報（テーマ名、スタイル設定、カラースキーム、フォント情報）

### ステップ4: スライド生成 (SlideWriterAgent)
- **入力**: SlideDeckオブジェクトとテンプレート
- **処理内容**:
  1. 各スライドのHTML生成
  2. テンプレートの適用
  3. レスポンシブデザインの実装
- **出力**: スライドのHTML

### ステップ5: 品質向上 (RefinerAgent)
- **入力**: スライドのHTML
- **処理内容**:
  1. アクセシビリティ（WCAG 2.1 AA）確認と修正
  2. 校正とテキスト品質向上
  3. 画像アクセシビリティの確認
  4. 一貫性のあるスタイリング確保
- **出力**: 改善されたHTMLとQAレポート

## エージェント間のループと連携

システム内では、複数のエージェント間で反復的な連携が行われています：

### 1. ResearchAgentとMonitoringAgentの連携ループ
- MonitoringAgentが調査結果を評価し、情報が不足している場合は追加検索を指示
- 情報の十分性が確認されるまで、または最大イテレーション数（深度に応じて1〜3回）に達するまで繰り返し
- 検索深度に応じてループ回数が調整される（low=1回、medium=2回、high=3回）

```python
# コード抜粋（簡略化）
iteration = 1
while not is_sufficient and iteration < max_depth_iterations:
    # 不足情報を特定
    # 追加検索を実行
    # 結果を再評価
    iteration += 1
```

### 2. OutlineAgentとResearchAgentのフィードバックループ
- OutlineAgentがアウトラインを生成後、MonitoringAgentがアウトラインの品質を評価
- 特定の知識ギャップがある場合、ResearchAgentに追加調査を依頼
- 新しい情報でアウトラインを更新するサイクルを形成

### 3. SlideWriterAgentとRefinerAgentの反復改善
- 初期スライド生成後、RefinerAgentが品質を評価
- 問題が見つかった場合、修正して再評価
- 最大2回の反復処理が行われ、最終的な品質が確保される

```python
# コード抜粋（簡略化）
for iteration in range(max_iterations):
    # スライド生成/改善
    # 品質評価
    if is_satisfactory:
        break  # 十分な品質に達したら終了
```

### 4. エラー時のフォールバックメカニズム
- 各ステップでエラーが発生した場合の代替処理パス
- 例: モニタリングエージェントが失敗した場合、より単純な処理パスへフォールバック

```python
try:
    # モニタリング付き処理
except Exception:
    # 基本的な処理へのフォールバック
```

## 検索結果とLLMによるスライド内容のブラッシュアップ

### 検索結果の活用方法
AI Slide Generatorは、以下のように検索結果をLLMと組み合わせてスライド内容を向上させています：

1. **初期調査とLLMによる情報統合**
   - 複数の情報源から得られた検索結果をLLMに入力し、一貫性のあるサマリーを生成
   - 異なる視点からの情報を統合し、バランスの取れた内容を作成

2. **情報の不足検出と追加調査**
   - MonitoringAgentが調査結果とアウトラインを評価し、情報が不足している部分を特定
   - 不足している情報について追加検索を実行し、結果を元の調査結果に統合
   - 例: 「depth=low」の場合でも、情報が極端に少ない場合はAIが基本情報を生成して補完

3. **イテレーティブな品質向上プロセス**
   - MonitoringAgentがスライド品質を評価し、問題点を特定
   - スライドの論理的な流れ、明確さ、情報の正確性を評価
   - 問題が見つかった場合、RefinerAgentが修正を実施

4. **ソースクレディビリティの評価と利用**
   - 情報源のドメイン（.edu、.gov、.org）や種類（ニュース、ブログ、ソーシャルメディア）に基づき信頼性スコアを計算
   - より信頼性の高い情報源からの情報を優先的に使用

5. **検索深度に応じた処理の調整**
   - 検索深度（low/medium/high）に応じて、情報収集と検証のレベルを調整
   - 「high」深度では、より多くの情報源を使用し、複数回の追加検索を実行
   - 「low」深度では、必要最小限の情報源で迅速に処理

## 検索結果のスライドへの反映に関する課題

検索結果や文章がスライドに適切に反映されていない場合の問題点と解決策について説明します。

### 考えられる問題点

1. **ResearchAgentからOutlineAgentへのデータ連携の不足**
   - ResearchResultオブジェクトの情報がOutlineAgentに十分に渡されていない可能性
   - 特にサマリー情報のみが渡され、個別の検索結果やその内容が失われている可能性

2. **OutlineAgentでのコンテンツ生成の問題**
   - 検索結果を参照するのではなく、LLMが独自の知識に頼ってアウトラインを生成している可能性
   - 調査結果の情報をLLMへのプロンプトに十分に含めていない可能性

3. **SlideWriterAgentでの情報損失**
   - アウトラインからHTMLへの変換過程で、元の検索情報への参照が失われている可能性
   - テンプレート適用時に、コンテンツよりもデザイン優先になっている可能性

4. **検索結果のフィルタリングが強すぎる**
   - 信頼性スコアやクラスタリングにより、重要な情報が除外されている可能性
   - 情報の冗長性除去のプロセスが過度に情報を削減している可能性

5. **プロンプト設計の問題**
   - LLMに対するプロンプトが、検索結果を使用するよう明示的に指示していない可能性
   - プロンプトが「検索結果を参照せよ」と指示していても、トークン制限により検索結果の大部分が切り捨てられている可能性

### 解決策の提案

1. **ResearchAgentとOutlineAgentの連携強化**
   - ResearchResultオブジェクトから、より構造化された形で情報をOutlineAgentに渡す
   - 単なるサマリーだけでなく、個別の検索結果を参照できるよう改善

2. **プロンプト設計の改善**
   ```python
   prompt = f"""
   以下は「{topic}」に関する検索結果です。これらの情報を使用してスライド内容を生成してください。
   検索結果の内容を必ず反映し、自分の知識だけに頼らないでください。
   
   検索結果:
   {formatted_search_results}
   
   各スライドには、対応する検索結果からの情報を必ず含めてください。
   ソース情報も各スライドの注釈に追加してください。
   """
   ```

3. **テンプレート適用プロセスの見直し**
   - コンテンツ優先のテンプレート適用プロセスに変更
   - テンプレートがコンテンツを変更/削除しないよう制約を設ける

4. **検証ステップの追加**
   - 生成されたスライドが元の検索結果の情報を十分に含んでいるか検証するステップを追加
   - 検索内容の反映率をスコア化し、基準値を下回る場合は再生成

5. **トレーサビリティの向上**
   - 各スライドのコンテンツがどの検索結果に基づいているかを追跡するメタデータを追加
   - スライド生成プロセスの各ステップで情報源の参照を維持

6. **直接的なコンテンツ引用メカニズムの導入**
   - 重要な検索結果からの直接引用をスライドに含める機能を追加
   - 引用元へのリンクや参照情報を付加

この問題を解決するには、検索結果からの情報の流れを追跡し、各ステップでどのような処理が行われているかの詳細な調査が必要です。また、コンテンツ生成プロセスでLLMの「独自の知識に基づく生成」と「入力された検索情報に基づく生成」のバランスを最適化することも重要です。

## テンプレート情報の埋め込みに関する課題

選択されたテンプレート情報をスライドに埋め込む際の主な課題と解決策は以下の通りです：

### 課題
1. **テンプレートとコンテンツの整合性**
   - 選択されたテンプレートがコンテンツの量や種類に必ずしも最適でない場合がある
   - 例: 長いテキストコンテンツに対して、最小限のテキスト用に設計されたテンプレートが選択される

2. **動的コンテンツの適応**
   - コンテンツの長さや構造が動的に変わる場合、固定テンプレートでは対応しきれない
   - 特に画像や複雑な図表を含むスライドでレイアウトの問題が発生する可能性

3. **スタイル設定の一貫性**
   - 複数のスライドにわたってスタイルの一貫性を維持する難しさ
   - カラースキームやフォントの適用が全てのテキスト要素に正しく反映されない場合がある

4. **レスポンシブデザインの確保**
   - 異なるデバイスやビューポートサイズでの表示最適化の難しさ
   - モバイルデバイスでの表示を考慮したテンプレート調整が必要

5. **アクセシビリティ要件との両立**
   - 見た目の美しさとアクセシビリティ要件（コントラスト比など）を両立させる難しさ
   - 一部のテンプレートデザインがWCAG基準を満たさない可能性

### 解決策の方向性
1. **適応型テンプレートシステム**
   - コンテンツの長さや種類に応じてテンプレートを動的に調整するシステムの開発
   - コンテンツ分析に基づくレイアウト最適化アルゴリズムの実装

2. **事前検証メカニズム**
   - テンプレート適用前にコンテンツとの適合性を検証するプロセスの導入
   - 問題が検出された場合の代替テンプレート提案システム

3. **ハイブリッドアプローチ**
   - 基本テンプレートとカスタム調整の組み合わせ
   - CSS変数とメディアクエリを活用した柔軟な対応

4. **ユーザーフィードバックループ**
   - 生成されたスライドに対するユーザーフィードバックを収集し、テンプレート選択アルゴリズムを改善
   - 頻繁に使用されるテンプレートの分析と最適化

これらの課題に対処することで、テンプレート情報の効果的な埋め込みとスライド全体の品質向上が実現できるでしょう。 