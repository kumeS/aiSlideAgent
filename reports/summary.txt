# AI Slide Generator プロジェクト概要

## プロジェクトの目的
OpenAI Agents SDKを利用したプレゼンテーション自動生成システムの開発。テキスト入力から高品質でビジュアル豊かなスライドを全自動で生成する。

## 主な機能
- テーマ入力からのウェブリサーチ
- スライド構造の自動設計
- HTML/CSS/JSによるスライド生成（Reveal.js/Tailwind）
- 関連画像の自動検索
- WCAG 2.1 AA準拠の品質チェック

## システム構成
1. **UI層**: FastAPI + Next.js
2. **エージェント層**:
   - ResearchAgent: 深層リサーチ
   - OutlineAgent: 構造設計
   - SlideWriterAgent: コンテンツ生成
   - ImageFetchAgent: 画像取得
   - RefinerAgent: 品質保証（実装済み）
3. **ツール層**: WebSearchTool, HTMLRenderTool, FileTool, PythonTool
4. **ストレージ層**: SQLite + ローカルファイル
5. **監視層**: Prometheus + Grafana

## 現状と今後の計画
### 実装済み
- プロジェクト初期化とベース構造
- RefinerAgent（WCAG 2.1 AA準拠の品質チェック）
  - 色コントラスト分析と修正
  - 見出し構造の検証と修正
  - 画像/キーボードアクセシビリティ対応
  - OpenAI APIによる多言語プルーフリーディング
  
### 進行中
- ResearchAgent & OutlineAgent機能の実装
- SlideWriter & ImageFetcher機能の開発

## 技術スタック
- Python 3.12+ (OpenAI Agents SDK 0.0.14)
- BeautifulSoup4, Tailwind CSS, Reveal.js
- FastAPI, Jinja2, Uvicorn

## スライド生成パイプライン
1. **Research**: ウェブ検索による情報収集
2. **Outline**: 最適なスライド構成設計
3. **Draft**: HTML草稿と画像の作成
4. **Refine**: 品質チェックと修正

## エージェント詳細

### 1. ResearchAgent
**機能**: トピックに関連する高品質な情報を収集・分析・構造化するエージェント
- **概要**:
  - マルチレイヤーのウェブ検索を実行
  - 複数ソースから情報を照合して信頼性を評価
  - 関連データを構造化形式で整理
  - 出典情報を保持し引用可能な形に整形
- **実装方法**:
  - WebSearchTool連携による階層的検索
  - OpenAI APIを用いた情報抽出と要約
  - JSON構造でのデータ保存
  - 分野別専門知識の判定と重み付け

### 2. OutlineAgent
**機能**: 収集された情報から最適なスライド構造を設計するエージェント
- **概要**:
  - プレゼンテーションの目的と対象者に応じた構成設計
  - 論理的なセクション区分と情報フローの最適化
  - スライド数や時間制約に合わせたコンテンツ配分
  - ナラティブ構築とストーリーテリング要素の組み込み
- **実装方法**:
  - 構成パターンテンプレートの活用
  - セクション間の論理的つながりの分析
  - OpenAI APIによる構造最適化
  - JSON形式でのアウトライン定義

### 3. SlideWriterAgent
**機能**: アウトラインに基づきHTML/CSSスライドを生成するエージェント
- **概要**:
  - Reveal.js/TailwindベースのHTML生成
  - 一貫したデザインテーマの適用
  - レスポンシブデザインの実装
  - アニメーションとトランジションの最適配置
- **実装方法**:
  - テンプレートベースのHTMLレンダリング
  - Jinja2によるテンプレート処理
  - TailwindCSSクラスの動的適用
  - セマンティックHTMLマークアップの生成

### 4. ImageFetchAgent
**機能**: スライドに最適な画像を検索・取得するエージェント
- **概要**:
  - コンテキストに適した高品質画像の検索
  - 著作権フリー画像の取得確保
  - 画像の最適サイズ変換とフォーマット調整
  - メタデータの付与（alt属性等）
- **実装方法**:
  - 画像検索API連携（Unsplash, Pixabay等）
  - 画像の関連性スコアリング
  - ローカルキャッシュシステム
  - Pythonイメージライブラリによる処理

### 5. RefinerAgent（実装済み）
**機能**: 生成されたスライドのアクセシビリティと品質を確保するエージェント
- **概要**:
  - WCAG 2.1 AA準拠のアクセシビリティチェック
  - テキスト品質の向上（文法、スペル、一貫性）
  - HTML構造の最適化
  - 多言語コンテンツ対応
- **実装方法**:
  - BeautifulSoupによるHTMLパース
  - 色コントラスト分析アルゴリズム
  - OpenAI APIを用いたテキスト校正
  - エラー耐性を持つ修正メカニズム

## 次のマイルストーン
1. Research Agent機能の実装
2. ツール層の各種ツールの実装・テスト
3. エージェント間の連携テスト
4. フロントエンドUI改善

## まとめ
現在、WCAG 2.1 AA準拠のアクセシビリティチェック機能を持つRefinerAgentの実装が完了しており、次のステップではデータ収集と構造化のためのエージェント開発を進める。 